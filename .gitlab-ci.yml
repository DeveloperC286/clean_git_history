stages:
  - clean-git-history-checking
  - conventional-commits-linting
  - conventional-commits-next-version-checking
  - formatting
  - linting
  - compiling
  - unit-testing
  - end-to-end-testing


variables:
  SEMANTIC_VERSIONING_REGEX: "[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*"
  BIN_DIRECTORY: "clean_git_history/"
  LIB_DIRECTORY: "clean_git_history_lib/"
  BIN_TAG_REGEX: "bin-${SEMANTIC_VERSIONING_REGEX}"
  LIB_TAG_REGEX: "lib-${SEMANTIC_VERSIONING_REGEX}"


clean-git-history-checking:
  stage: clean-git-history-checking
  image: rust
  before_script:
    - cargo install clean_git_history
  script:
    # Check all the commits in the branch.
    - /usr/local/cargo/bin/clean_git_history --from-reference "origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
  rules:
    - if: $CI_MERGE_REQUEST_ID


conventional-commits-linting:
  stage: conventional-commits-linting
  image: rust
  before_script:
    - cargo install conventional_commits_linter
  script:
    # Lint all the commits in the branch.
    - /usr/local/cargo/bin/conventional_commits_linter --from-reference "origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" --allow-angular-type-only
  rules:
    - if: $CI_MERGE_REQUEST_ID


bin-conventional-commits-next-version-checking:
  stage: conventional-commits-next-version-checking
  image: rust
  before_script:
    - cargo install conventional_commits_next_version
  script:
    - cd ${BIN_DIRECTORY}
    # Get current version and latest tag.
    - CURRENT_VERSION=$(grep "^version = \"${SEMANTIC_VERSIONING_REGEX}\"$" Cargo.toml | cut -d '"' -f 2)
    # Get latest tag.
    - LATEST_TAG=$(git tag --sort=-committerdate | grep "${BIN_TAG_REGEX}" | head -1)
    - LATEST_VERSION=$(echo "${LATEST_TAG}" | cut -d '-' -f 2)
    # Check current vs expected.
    - /usr/local/cargo/bin/conventional_commits_next_version --batch-commits --from-reference "${LATEST_TAG}" --from-version "${LATEST_VERSION}" --current-version "${CURRENT_VERSION}"
  rules:
    - if: $CI_MERGE_REQUEST_ID


lib-conventional-commits-next-version-checking:
  stage: conventional-commits-next-version-checking
  image: rust
  before_script:
    - cargo install conventional_commits_next_version
  script:
    - cd ${LIB_DIRECTORY}
    # Get current version and latest tag.
    - CURRENT_VERSION=$(grep "^version = \"${SEMANTIC_VERSIONING_REGEX}\"$" Cargo.toml | cut -d '"' -f 2)
    # Get latest tag.
    - LATEST_TAG=$(git tag --sort=-committerdate | grep "${LIB_TAG_REGEX}" | head -1)
    - LATEST_VERSION=$(echo "${LATEST_TAG}" | cut -d '-' -f 2)
    # Check current vs expected.
    - /usr/local/cargo/bin/conventional_commits_next_version --batch-commits --from-reference "${LATEST_TAG}" --from-version "${LATEST_VERSION}" --current-version "${CURRENT_VERSION}" --monorepo "^${LIB_DIRECTORY}"
  rules:
    - if: $CI_MERGE_REQUEST_ID


formatting:
  stage: formatting
  image: rust
  before_script:
   - rustup component add rustfmt
  script:
    - cargo fmt --all -- --check
  rules:
    - if: $CI_MERGE_REQUEST_ID


end-to-end-tests-formatting:
  stage: formatting
  image: python:3-slim
  before_script:
    - pip3 install autopep8
  script:
    - for i in $(du -a "./clean_git_history/end-to-end-tests/" | awk '{print $2}' | grep -i "[.]py$"); do
    - cp "$i" "temp.txt"
    - autopep8 --in-place --aggressive --aggressive "$i"
    - cmp "$i" "temp.txt" || ( echo "$i needs formatted." && exit 1 )
    - done
  rules:
    - if: $CI_MERGE_REQUEST_ID


linting:
  stage: linting
  image: rust
  before_script:
    - rustup component add clippy
  script:
    - cargo clippy --verbose --workspace --all-targets -- -D warnings
    - cargo clippy --verbose --workspace --all-targets --all-features -- -D warnings
    - cargo clippy --verbose --workspace --all-targets --no-default-features -- -D warnings
  rules:
    - if: $CI_MERGE_REQUEST_ID


compiling:
  stage: compiling
  image: rust
  script:
    - cargo build --verbose --workspace
    - cargo build --verbose --workspace --all-features
    - cargo build --verbose --workspace --no-default-features
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == "main"


unit-testing:
  stage: unit-testing
  image: rust
  script:
    - cargo test --verbose --workspace
    - cargo test --verbose --workspace --all-features
    - cargo test --verbose --workspace --no-default-features
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == "main"


end-to-end-testing:
  stage: end-to-end-testing
  image: rust
  before_script:
    - apt update
    - apt install python3-minimal python3-pip git -y
    - cargo build
    - cd clean_git_history/end-to-end-tests/
    - pip3 install -r requirements.txt
  script:
    - behave
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == "main"
